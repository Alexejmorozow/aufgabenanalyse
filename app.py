import streamlit as st
import time

# --- Page config ---
st.set_page_config(page_title="Decision Compass", layout="wide")

# --- Shared definitions for "Aufgaben-Analyse" (disjunktiv / konjunktiv / additiv) ---
TYP_EMOJI = {
    "disjunktiv": "‚≠ê",
    "konjunktiv": "‚õìÔ∏è",
    "additiv": "‚ûï"
}

FARBEN = {
    "light": {
        "disjunktiv": "#E63946",
        "konjunktiv": "#F1FA3C",
        "additiv": "#2A9D8F",
        "background": "#FFFFFF",
        "text": "#000000",
        "box": "#f9f9f9"
    },
    "dark": {
        "disjunktiv": "#FF6B6B",
        "konjunktiv": "#FFD93D",
        "additiv": "#4ECDC4",
        "background": "#121212",
        "text": "#FFFFFF",
        "box": "#1E1E1E"
    }
}

def animated_progress(value, max_value, color, text, speed=0.02):
    """Simple animated progress for visual feedbac k. Note: keep steps small to avoid long block."""
    placeholder = st.empty()
    max_value = max(max_value, 1)
    for i in range(1, value + 1):
        percent = min(i / max_value, 1.0)
        placeholder.progress(percent, text=f"{text}: {i}")
        time.sleep(speed)
    st.markdown(f"<span style='color:{color}; font-weight:bold'>{text}: {value}</span>", unsafe_allow_html=True)


def typ_box(title, bericht, box_color):
    st.markdown(f"""
    <div style='border:2px solid #888888; padding:15px; border-radius:10px; background-color:{box_color}; margin-bottom:15px'>
    <h3>{title}</h3>
    {bericht}
    </div>
    """, unsafe_allow_html=True)

# --- Sidebar / global navigation ---
st.sidebar.title("üß≠ Decision Compass")
module = st.sidebar.radio(
    "W√§hle ein Modul:",
    [
        "üè† Start",
        "üîé Aufgaben-Analyse",
        "üìä SWOT-Analyse",
        "‚è≥ Eisenhower-Matrix",
        "üë• RACI-Matrix",
        "‚öñÔ∏è Balanced Scorecard",
    ]
)

# --- START ---
if module == "üè† Start":
    st.title("üß≠ Decision Compass")
    st.write("""
    Willkommen zum Decision Compass! Dieses Tool vereint bew√§hrte Methoden der Entscheidungsfindung unter einem Dach.

    W√§hle ein Modul in der linken Leiste und arbeite Schritt f√ºr Schritt.
    """)
    st.divider()
    st.subheader("Kurzer Abriss der Module")
    st.markdown(
        """
        - **Aufgaben-Analyse** (disjunktiv / konjunktiv / additiv) ‚Äì dein origin√§res Tool, nun als Modul
        - **SWOT** ‚Äì St√§rken, Schw√§chen, Chancen, Risiken
        - **Eisenhower** ‚Äì Priorit√§t nach wichtig/urgent
        - **RACI** ‚Äì Rollen & Verantwortlichkeit
        - **Balanced Scorecard** ‚Äì Ziele & KPI in vier Perspektiven
        """,
        unsafe_allow_html=True,
    )

# --- AUFGABEN-ANALYSE (dein origin√§rer Fragebogen) ---
elif module == "üîé Aufgaben-Analyse":
    # Wir integrieren deinen Originalcode, leicht refactored in eine Funktion
    st.title("üîé Aufgaben-Analyse (Disjunktiv / Konjunktiv / Additiv)")

    # Dark mode toggle
    dark_mode = st.checkbox("üåô Dark Mode aktivieren", value=False)
    mode = "dark" if dark_mode else "light"
    colors = FARBEN[mode]

    st.markdown(f"""
    <style>
    .stApp {{
        background-color: {colors['background']};
        color: {colors['text']};
    }}
    .css-1d391kg, .css-1d391kg * {{
        color: {colors['text']} !important;
    }}
    </style>
    """, unsafe_allow_html=True)

    st.write("Beantworte 12 kurze Fragen auf einer Skala von 1 bis 7.")

    SCHWELLENWERT_HYBRID = 6

    fragen = [
        {"text": "Je mehr Mitglieder aktiv mitwirken, desto besser ‚Äì auch kleine Beitr√§ge summieren sich zu einem gro√üen Ergebnis.", "typ": "additiv"},
        {"text": "Wenn auch nur eine Person ihre Aufgabe nicht erf√ºllt, ist das gesamte Projekt gef√§hrdet.", "typ": "konjunktiv"},
        {"text": "Eine einzelne Spitzenidee oder herausragende Leistung kann den gesamten Projekterfolg sicherstellen.", "typ": "disjunktiv"},
        {"text": "Die Zusammenarbeit scheitert, wenn ein einzelnes Mitglied nicht die n√∂tige Qualit√§t liefert.", "typ": "konjunktiv"},
        {"text": "Erfolg entsteht vor allem durch die Summe vieler Einzelbeitr√§ge, nicht durch einzelne Spitzenleistungen.", "typ": "additiv"},
        {"text": "Die Leistung der besten Person bestimmt weitgehend, ob das Team erfolgreich ist, unabh√§ngig von den anderen.", "typ": "disjunktiv"},
        {"text": "Fehler oder Ausf√§lle einzelner wirken sich sofort und stark auf den Gesamterfolg aus.", "typ": "konjunktiv"},
        {"text": "Wenn alle gleichm√§√üig mitwirken, steigt die Wahrscheinlichkeit f√ºr einen erfolgreichen Abschluss deutlich.", "typ": "disjunktiv"},
        {"text": "Die Leistung des schw√§chsten Mitglieds bestimmt ma√ügeblich, ob das Team sein Ziel erreicht.", "typ": "konjunktiv"},
        {"text": "Jeder Beitrag tr√§gt zum Gesamterfolg bei, aber kein einzelner Ausfall bringt alles zum Scheitern.", "typ": "additiv"},
        {"text": "Auch kleine und regelm√§√üige Beitr√§ge aller Beteiligten k√∂nnen zusammen zu einem sehr starken Gesamtergebnis f√ºhren.", "typ": "additiv"},
        {"text": "F√ºr den Erfolg reicht es, wenn eine Person die Aufgabe vollst√§ndig meistert ‚Äì andere Beitr√§ge sind nicht entscheidend.", "typ": "disjunktiv"},
    ]

    punkte = {"disjunktiv": 0, "konjunktiv": 0, "additiv": 0}

    with st.form("fragen_form"):
        antworten = []
        for i, frage in enumerate(fragen, start=1):
            st.markdown(f"<span style='color:{colors['text']}; font-weight:bold'>{i}. {frage['text']}</span>", unsafe_allow_html=True)
            antwort = st.slider("", min_value=1, max_value=7, value=4, key=f"slider_{i}")
            antworten.append((frage['typ'], antwort))
        submitted = st.form_submit_button("Analyse starten")

    if submitted:
        durchschnitt = sum([antwort for _, antwort in antworten]) / len(antworten)
        if durchschnitt < 2.0:
            st.warning("üé≠ Ergebnis: Keine Aufgabe erkannt ‚Äì Zeit f√ºr einen Kaffee ‚òï")
        else:
            for typ, antwort in antworten:
                punkte[typ] += antwort

            gesamtpunkte = sum(punkte.values())
            prozentuale_verteilung = {typ: round((wert / gesamtpunkte) * 100, 1) for typ, wert in punkte.items()}
            max_punkte = max(punkte.values())

            hybrid_typen = [typ for typ, wert in punkte.items() if max_punkte - wert <= SCHWELLENWERT_HYBRID]

            st.success("‚úÖ Analyse abgeschlossen!")

            col1, col2 = st.columns(2)
            with col1:
                st.subheader("üìä Punktest√§nde")
                for typ, wert in punkte.items():
                    animated_progress(value=wert, max_value=7, color=colors[typ], text=f"{TYP_EMOJI[typ]} {typ.capitalize()}")
            with col2:
                st.subheader("üìà Prozentuale Verteilung")
                for typ, prozent in prozentuale_verteilung.items():
                    animated_progress(value=int(prozent), max_value=100, color=colors[typ], text=f"{TYP_EMOJI[typ]} {typ.capitalize()} %", speed=0.01)

            st.divider()
            st.subheader("üéØ Empfehlung")

            typ_name = " + ".join([f"{TYP_EMOJI[typ]} {typ.capitalize()}" for typ in hybrid_typen])
            bericht = ""
            for typ in hybrid_typen:
                if typ == "disjunktiv":
                    bericht += f"""
**Um was f√ºr eine Aufgabe handelt es sich?**  
Disjunktiv ‚≠ê: Erfolg h√§ngt von der besten Leistung im Team ab. Nur die st√§rksten Mitglieder z√§hlen.  

**Stolpersteine:**  
- Schwache Mitglieder vernachl√§ssigt  
- √úberlastung der Spitzenkr√§fte  

**Strategie & Vorgehensweise:**  
- St√§rken gezielt f√∂rdern  
- Kreativit√§t zulassen, andere unterst√ºtzen  
- Kontrolle der Kernleistungen  
- Entscheidungen eher autokratisch
"""
                elif typ == "konjunktiv":
                    bericht += f"""
**Um was f√ºr eine Aufgabe handelt es sich?**  
Konjunktiv ‚õìÔ∏è: Erfolg h√§ngt vom schw√§chsten Glied ab. Die Kette ist nur so stark wie ihr schw√§chstes Glied.  

**Stolpersteine:**  
- Schwache Mitglieder gef√§hrden den Erfolg  
- Fehlende Kooperation ist kritisch  

**Strategie & Vorgehensweise:**  
- Unterst√ºtzung f√ºr schwache Mitglieder  
- Intensive Zusammenarbeit, Aufgaben fair verteilen  
- Entscheidungen demokratisch
"""
                elif typ == "additiv":
                    bericht += f"""
**Um was f√ºr eine Aufgabe handelt es sich?**  
Additiv ‚ûï: Jeder Beitrag z√§hlt, die Summe entscheidet.  

**Stolpersteine:**  
- Einzelne Beitr√§ge werden untersch√§tzt  
- Motivation k√∂nnte schwanken  

**Strategie & Vorgehensweise:**  
- Alle aktiv einbeziehen  
- Arbeit gleichm√§√üig verteilen  
- Fortschritte sichtbar machen  
- Motivation hochhalten
"""
            typ_box(typ_name, bericht, colors["box"])

# --- SWOT ---
elif module == "üìä SWOT-Analyse":
    st.title("üìä SWOT-Analyse")
    st.write("Analysiere St√§rken, Schw√§chen, Chancen und Risiken.")

    col1, col2 = st.columns(2)
    with col1:
        staerken = st.text_area("St√§rken (Strengths)")
        chancen = st.text_area("Chancen (Opportunities)")
    with col2:
        schwaechen = st.text_area("Schw√§chen (Weaknesses)")
        risiken = st.text_area("Risiken (Threats)")

    if st.button("Analyse erstellen"):
        st.success("SWOT-Analyse fertig")
        st.write("### Ergebnisse")
        st.write("**St√§rken:**", staerken)
        st.write("**Schw√§chen:**", schwaechen)
        st.write("**Chancen:**", chancen)
        st.write("**Risiken:**", risiken)

        # Einfache 2x2 Matrix als HTML
        st.markdown(
            f"""
            <div style='display:grid; grid-template-columns:1fr 1fr; gap:10px'>
              <div style='border:1px solid #ddd; padding:10px'><h4>St√§rken</h4><div>{staerken.replace('
','<br>')}</div></div>
              <div style='border:1px solid #ddd; padding:10px'><h4>Schw√§chen</h4><div>{schwaechen.replace('
','<br>')}</div></div>
              <div style='border:1px solid #ddd; padding:10px'><h4>Chancen</h4><div>{chancen.replace('
','<br>')}</div></div>
              <div style='border:1px solid #ddd; padding:10px'><h4>Risiken</h4><div>{risiken.replace('
','<br>')}</div></div>
            </div>
            """,
            unsafe_allow_html=True,
        )

# --- EISENHOWER ---
elif module == "‚è≥ Eisenhower-Matrix":
    st.title("‚è≥ Eisenhower-Matrix")
    st.write("Priorisiere Aufgaben nach Wichtigkeit und Dringlichkeit.")

    if 'tasks' not in st.session_state:
        st.session_state.tasks = []

    with st.form("task_form"):
        t_name = st.text_input("Aufgabe")
        t_wichtig = st.radio("Wichtigkeit", ["hoch", "mittel", "niedrig"], index=1)
        t_dringend = st.checkbox("dringend")
        add = st.form_submit_button("Aufgabe anlegen")
        if add and t_name:
            st.session_state.tasks.append({"name": t_name, "wichtig": t_wichtig, "dringend": t_dringend})

    if st.session_state.tasks:
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("Quadrant: Sofort tun (wichtig + dringend)")
            for t in st.session_state.tasks:
                if (t['wichtig'] == 'hoch') and t['dringend']:
                    st.write(f"- {t['name']}")
        with col2:
            st.subheader("Quadrant: Planen (wichtig, nicht dringend)")
            for t in st.session_state.tasks:
                if (t['wichtig'] == 'hoch') and (not t['dringend']):
                    st.write(f"- {t['name']}")
        st.divider()
        col3, col4 = st.columns(2)
        with col3:
            st.subheader("Quadrant: Delegieren (nicht wichtig, dringend)")
            for t in st.session_state.tasks:
                if (t['wichtig'] != 'hoch') and t['dringend']:
                    st.write(f"- {t['name']}")
        with col4:
            st.subheader("Quadrant: Eliminieren (nicht wichtig, nicht dringend)")
            for t in st.session_state.tasks:
                if (t['wichtig'] != 'hoch') and (not t['dringend']):
                    st.write(f"- {t['name']}")

# --- RACI ---
elif module == "üë• RACI-Matrix":
    st.title("üë• RACI-Matrix")
    st.write("Definiere Rollen f√ºr Aufgaben: Responsible, Accountable, Consulted, Informed")

    aufgabenliste = st.text_area("Aufgaben (eine pro Zeile)")
    team = st.text_area("Teammitglieder (eine pro Zeile)")

    if st.button("Matrix generieren"):
        aufgaben = [a.strip() for a in aufgabenliste.splitlines() if a.strip()]
        mitglieder = [m.strip() for m in team.splitlines() if m.strip()]
        if not aufgaben or not mitglieder:
            st.warning("Bitte Aufgaben und Team eintragen")
        else:
            # Einfache interaktive Tabelle: nutzer w√§hlt f√ºr jede Aufgabe pro rolle eine Person
            st.write("### Matrix")
            cols = st.columns(len(mitglieder) + 1)
            cols[0].write("Aufgabe")
            for i, m in enumerate(mitglieder, start=1):
                cols[i].write(m)
            for a in aufgaben:
                row = []
                row.append(a)
                cols = st.columns(len(mitglieder) + 1)
                cols[0].write(a)
                for i, m in enumerate(mitglieder, start=1):
                    val = cols[i].selectbox(f"{a}-{m}", ["-", "R", "A", "C", "I"], key=f"{a}-{m}")

# --- BALANCED SCORECARD ---
elif module == "‚öñÔ∏è Balanced Scorecard":
    st.title("‚öñÔ∏è Balanced Scorecard")
    st.write("Ziele & KPI in vier Perspektiven definieren")

    perspektiven = ["Finanzen", "Kunden", "Prozesse", "Lernen & Entwicklung"]
    kpi_data = {}
    for p in perspektiven:
        st.subheader(p)
        ziele = st.text_area(f"Ziele f√ºr {p}", key=f"ziel_{p}")
        kpis = st.text_area(f"KPI f√ºr {p} (eine pro Zeile)", key=f"kpi_{p}")
        kpi_data[p] = {"ziele": ziele, "kpis": kpis}

    if st.button("Scorecard speichern"):
        st.success("Scorecard erfasst")
        st.write(kpi_data)

# --- Footer mit next step hint ---
st.markdown("---")
st.write("Hinweis: Das ist ein Grundger√ºst. Gern baue ich Export, MultiUser, Auth oder Team-Mode ein.")
